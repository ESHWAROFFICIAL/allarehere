html, body {
  height: 100%;
  overflow: hidden;
}




css



// slither.io

const worm = {
  x: 0.0,
  y: 0.0,
  heading: 0.0,
  length: 20,
  parts: []
}

const food = [];

function sizeFromLength(length) {
  return 1.5 * pow(length,0.6);
}

function drawWorm() {
  const size = sizeFromLength(worm.length);
  push();
  translate(worm.x, worm.y);
  rotate(worm.heading);
  ellipse(0, 0, size);
  pop();

  worm.parts.forEach((part) => {
    push();
    translate(part.x, part.y);
    ellipse(0, 0, size);
    pop();
  });
}

const FOOD_SIZE = 5.0;

function drawFood() {
  food.forEach((dot) => {
    push();
    translate(dot.x, dot.y);
    ellipse(0, 0, FOOD_SIZE);
    pop();
  });
}

const MAX_HEADING_CHANGE = 2.5;

function checkInput() {
  const dx = mouseX - windowWidth/2;
  const dy = mouseY - windowHeight/2;
  var desired = atan2(dy, dx);
  if (desired < worm.heading) { desired += 360; }
  var delta = desired - worm.heading;
  if (delta > 180) { delta -= 360; }
  if (delta > MAX_HEADING_CHANGE) { delta = MAX_HEADING_CHANGE; }
  else if (delta < -MAX_HEADING_CHANGE) { delta = -MAX_HEADING_CHANGE; }
  worm.heading += delta;
}

const DRAW_SEGMENT_RATE = 7;
var lastDrawn = DRAW_SEGMENT_RATE;

const DROP_RATE = 4;
var lastDrop = DROP_RATE;

const REGULAR_SPEED = 1.0;
const FAST_SPEED = 2.0;

const MIN_EATING_DISTANCE = 100;

function updateWorm() {
  const isFast = mouseIsPressed && worm.length > 10;
  const speed = isFast ? FAST_SPEED : REGULAR_SPEED;
  worm.x += cos(worm.heading) * speed;
  worm.y += sin(worm.heading) * speed;
  if (lastDrawn <= 0) {
    worm.parts.push({x: worm.x, y: worm.y});
    lastDrawn = DRAW_SEGMENT_RATE;
  } else {
    lastDrawn -= speed + 0;
  }
  if (worm.parts.length > worm.length) {
    const last = worm.parts.shift();
    if (isFast) {
      if (lastDrop <= 0) {
        food.push(last);
        worm.length -= 2.0;
        lastDrop = DROP_RATE;
      } else {
        lastDrop--;
      }
    }
  }
  food.forEach((dot, i) => {
    const collisionDistance = sq(sizeFromLength(worm.length)/2) + sq(FOOD_SIZE);
    const dx = dot.x - worm.x;
    const dy = dot.y - worm.y;
    if (dx*dx + dy*dy < 4 * collisionDistance) {
      worm.length += 1.0;
      food.splice(i,1);
    }
  });
  food.filter((dot) => dot.eaten !== true);
}

function draw() {
  clear();
  background(0); // black
  stroke(255);  // white
  noFill();

  checkInput();
  updateWorm();
  push();
  translate(windowWidth/2 - worm.x, windowHeight/2 - worm.y);
  drawWorm();
  drawFood();
  pop();
}

function initializeFood() {
  for (var x=0; x < 500; x++) {
    food.push({x: random(1000) - 500, y: random(1000) - 500});
  }
}

function setup() {
  angleMode(DEGREES);
  createCanvas(windowWidth, windowHeight);
  initializeFood();
}

function windowResized() {
  resizeCanvas(windowWidth, windowHeight);
}




js
